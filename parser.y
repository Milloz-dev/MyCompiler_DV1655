%{
#include <stdio.h>
#include <stdlib.h>
extern int yylex();  // Lexical analyzer
extern char *yytext;  // Declare yytext
void yyerror(const char *s);  // Error handler
%}

//(B) Syntax Analysis (Parser) using Bison.
//   -Uses the tokens generated by the scanner.
//   -Validates the grammar based on the MiniJava EBNF.
//   -Constructs an Abstract Syntax Tree (AST).


%token INT RETURN IF ELSE WHILE ID NUMBER LPAREN RPAREN LBRACE RBRACE SEMICOLON

%debug //remove when done

%%

program:
    stmt_list
    ;

stmt_list:
    stmt_list stmt
    | stmt
    ;

stmt:
    INT ID SEMICOLON { printf("Variable declaration\n"); }
    | RETURN NUMBER SEMICOLON { printf("Return statement\n"); }
    | IF LPAREN expr RPAREN stmt ELSE stmt { printf("If-Else statement\n"); }
    | WHILE LPAREN expr RPAREN stmt { printf("While loop\n"); }
    | LBRACE stmt_list RBRACE
    ;

expr:
    ID { printf("Identifier: %s\n", yytext); }
    | NUMBER { printf("Number: %s\n", yytext); }
    ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Parse error: %s\n", s);
    fprintf(stderr, "At token: %s\n", yytext);
}

int main() {
    yyparse();
    return 0;
}
